ggpairs(data = organdata_sm,
mapping = aes(color = consent_law),
upper = list(continuous = wrap("density"), combo = "box_no_facet"),
lower = list(continuous = wrap("points"), combo = warp("dot_no_facet")))
library(GGally)
organdata_sm <- organdata %>%
select(donors, pop_dens, pubhealth,
roads, consent_law)
ggpairs(data = organdata_sm,
mapping = aes(color = consent_law),
upper = list(continuous = wrap("density"), combo = "box_no_facet"),
lower = list(continuous = wrap("points"), combo = warp("dot_no_facet")))
ggpairs(data = organdata_sm,
mapping = aes(color = consent_law),
upper = list(continuous = wrap("density"), combo = "box_no_facet"),
lower = list(continuous = wrap("points"), combo = wrap("dot_no_facet")))
ggpairs(data = organdata_sm,
mapping = aes(color = consent_law))
?ggparis
?ggpairs
ggpairs(data = organdata_sm,
mapping = aes(color = consent_law),
upper = list(continuous = wrap("density", combo = "box_no_facet")))
out_le <- gapminder %>%
group_by(continent, year) %>%
nest(.key = "hoge") # .key で名前を変更できる
head(out_le)
?nest
# nest()関数によって，
# 表形式のまま複雑なオブジェクト(リスト)を保存することができる
# unnestを使って対象のデータを取り出すことが可能
out_le %>% filter(continent == "Europe" & year == 1977)%>%
unnest(cols = c(data))
# パッケージの読み込み
library(survey)
library(srvyr)
# データの確認
glimpse(gss_lon)
options(survey.lonely.psu = "adjust")
options(na.action = "na.pass")
gss_wt <- subset(gss_lon, year > 1974) %>%
mutate(stratvar = interaction(year, vstrat)) %>%
as_survey_design(ids = vpsu,
strata = stratvar,
weights = wtssall,
nest = TRUE)
# stratvar列: 階層構造の情報である年ごとのサンプリング層の情報
#   interaction()関数を使って，yearとvstrat変数を組み合わせた，それぞれの年についての階層情報ベクトル
# 出力として，「1976.7001」のようなyear.vstratの形になる
gss_hoge
# as_survey_design()関数を使って，調査デザインに関する情報を追加する
# サンプリングID，層(strata)，重み付け(weight)に関する情報を追加する
# survey_mean()関数を使って，1976~2016年それぞれの年における人種ごとの教育歴の分布を算出する
out_grp <- gss_wt %>%
filter(year %in% seq(1976, 2016, by = 4)) %>%
group_by(year, race, degree) %>%
summarize(prop = survey_mean(na.rm = TRUE))
out_grp
# 確認
out_grp %>% group_by(year, race) %>%
summarize(sum = sum(prop))
# 度数の比率は各年の人種ごとに合計されて1になる
# 各年の人種と教育歴の全ての組み合わせの合計で1にしたい場合は
# interaction()関数を使って交互作用変数を考えると良い
out_mrg <- gss_wt %>%
filter(year %in% seq(1976, 2016, by = 4)) %>%
mutate(racedeg = interaction(race, degree)) %>%
group_by(year, racedeg) %>%
summarize(prop = survey_mean(na.rm = TRUE))
out_mrg
# 確認
out_mrg %>% group_by(year) %>%
summarise(total = sum(prop))
# race.degreeのような形で変数を扱いたくない場合も
# raceとdegreeをそれぞれ別の列で扱いたい
# separate()関数を使うことで対象列の名前を二つの列に分割できる
out_mrg <- gss_wt %>%
filter(year %in% seq(1976, 2016, by = 4)) %>%
mutate(racedeg = interaction(race, degree)) %>%
group_by(year, racedeg) %>%
summarize(prop = survey_mean(na.rm = TRUE)) %>%
separate(racedeg, sep = "\\.", into = c("race", "degree"))
out_mrg
library(tidyverse)
library(gapminder)
library(socviz)
library(ggrepel)
election %>% select(state, total_vote,
r_points, pct_trump, party, census) %>%
slice_sample(n = 5)
glimpse(election)
head(election)
p0 <- ggplot(data = subset(election, st %nin% "DC"),
mapping = aes(x = r_points,
y = reorder(state, r_points),
color = party))
p1 <- p0 + geom_vline(xintercept = 0,
color = "gray30") +
geom_point(size = 2)
p1
p2 <- p1 + scale_color_manuual(values = party_colors) +
scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
labels = c("30\n (Clinton)", "20", "10", "0",
"10" , "20", "30", "40\n (Trump)"))
p2 <- p1 + scale_color_manual(values = party_colors) +
scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
labels = c("30\n (Clinton)", "20", "10", "0",
"10" , "20", "30", "40\n (Trump)"))
# 図7.2
# 共和党が赤，民主党が青
party_colors <- c("#2E74C0", "#CB454A")
p0 <- ggplot(data = subset(election, st %nin% "DC"),
mapping = aes(x = r_points,
y = reorder(state, r_points),
color = party))
p2 <- p1 + scale_color_manual(values = party_colors) +
scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
labels = c("30\n (Clinton)", "20", "10", "0",
"10" , "20", "30", "40\n (Trump)"))
p0 <- ggplot(data = subset(election, st %nin% "DC"),
mapping = aes(x = r_points,
y = reorder(state, r_points),
color = party))
p1 <- p0 + geom_vline(xintercept = 0,
color = "gray30") +
geom_point(size = 2)
p2 <- p1 + scale_color_manual(values = party_colors) +
scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
labels = c("30\n (Clinton)", "20", "10", "0",
"10" , "20", "30", "40\n (Trump)"))
p2
head(election)
p2 + facet_wrap(~ censu)
p2 + facet_wrap(~ census)
p2 + facet_wrap(~ census, ncol = 1)
glimpse(election)
head(election)
election %>% select(state, total_vote,
r_points, pct_trump, party, census) %>%
slice_sample(n = 5)
# 図7.2
# 共和党が赤，民主党が青
party_colors <- c("#2E74C0", "#CB454A")
p0 <- ggplot(data = subset(election, st %nin% "DC"),
mapping = aes(x = r_points,
y = reorder(state, r_points),
color = party))
p1 <- p0 + geom_vline(xintercept = 0,
color = "gray30") +
geom_point(size = 2)
p2 <- p1 + scale_color_manual(values = party_colors) +
scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
labels = c("30\n (Clinton)", "20", "10", "0",
"10" , "20", "30", "40\n (Trump)"))
p2 + facet_wrap(~ census, ncol = 1)
p2 + facet_wrap(~ census, ncol = 1, scales = "free_y")
glimpse(election)
head(election)
election %>% select(state, total_vote,
r_points, pct_trump, party, census) %>%
slice_sample(n = 5)
# 図7.2
# 共和党が赤，民主党が青
party_colors <- c("#2E74C0", "#CB454A")
p0 <- ggplot(data = subset(election, st %nin% "DC"),
mapping = aes(x = r_points,
y = reorder(state, r_points),
color = party))
p1 <- p0 + geom_vline(xintercept = 0,
color = "gray30") +
geom_point(size = 2)
p2 <- p1 + scale_color_manual(values = party_colors) +
scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
labels = c("30\n (Clinton)", "20", "10", "0",
"10" , "20", "30", "40\n (Trump)"))
p2 + facet_wrap(~ census, ncol = 1, scales = "free_y")
p2 + facet_wrap(~ census, ncol = 1, scales = "free_y")
p2 <- p1 + scale_color_manual(values = party_colors) +
scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
labels = c("30\n (Clinton)", "20", "10", "0",
"10" , "20", "30", "40\n (Trump)"))
p2 + facet_wrap(~ census, ncol = 1, scales = "free_y")
p2 + facet_wrap(~ census, ncol = 1, scales = "free_y") +
guides(color = "none") +
labs(x = "Point Margin", y = "")
p2 + facet_wrap(~ census, ncol = 1, scales = "free_y") +
guides(color = "none") +
labs(x = "Point Margin", y = "") +
theme(axis.text = element_text(size = 8))
us_state <- map_data("state")
head(us_state)
p <- ggplot(data = us_data,
mapping = aes(x = long, y = lat, group = group))
p <- ggplot(data = us_state,
mapping = aes(x = long, y = lat, group = group))
p + geom_polygon(fill = "white", color = "black")
japan_map <- map_data("japan")
?map_data
p <- ggplot(data = us_state,
mapping = aes(x = long, y = lat, group = group,
fill = region))
p + geom_polygon(color = "gray90", size = 0.1) +
guides(fill = "none")
p + geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
guides(fill = "none")
p + geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 15) +
guides(fill = "none")
p + geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 0) +
guides(fill = "none")
p + geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 0, lat1 = 0) +
guides(fill = "none")
p + geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 35, lat1 = 90) +
guides(fill = "none")
p + geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
guides(fill = "none")
head(us_state)
us_state
unique(us_state$region)
#
election$region
#
head(election
#
head(election)
#
head(election)
#
election$state
#
unique(election$state)
election$region <- tolower(election$state)
# 少しでも違うと結合出来ないので，丁寧に合わせる
election$region <- tolower(election$state)
us_states_elec <- left_join(us_state, election)
head(us_states_elec)
slice_sample(us_states_elec, n = 10)
head(us_states_elec, n = 20)
p <- ggplot(data = us_states_elec,
mapping = aes(x = long, y = lat,group = group, fill = party))
p + geom_polygon()
p + geom_polygon(color = "gray80", size = 0.1)
# グラフを洗練される
p <- ggplot(data = us_states_elec,
mapping = aes(x = long, y = lat, group = group, fill = party))
p + geom_polygon(color = "gray80", size = 0.1,
)
p + geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
p2 <- p1 +
scale_fill_manual(values = party_colors)
p1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
p2 <- p1 +
scale_fill_manual(values = party_colors)
# グラフを洗練される
p0 <- ggplot(data = us_states_elec,
mapping = aes(x = long, y = lat, group = group, fill = party))
p1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
p2 <- p1 +
scale_fill_manual(values = party_colors)
p2
p2 <- p1 +
scale_fill_manual(values = party_colors) +
labs(title = "Election Results 2016", fill = NULL)
p2
p2 + theme_map()
?theme_map
p2
library(ggtheme)
install.packages(ggtheme)
install.packages("ggthemes")
p2 + ggthemes::theme_map()
# 数値的な割合の可視化
# トランプが獲得した表の割合
p0 <- ggplot(data = us_states_elec,
mapping = aes(x = long, y = lat, group = group, fill = pct_trump))
p1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
p1
ggthemes::theme_map()
p2 <- p1 +
labs(title = "Trump vote", fill = "Percent")
p1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
p2 <- p1 +
labs(title = "Trump vote", fill = "Percent") +
ggthemes::theme_map()
p2
# このままだと数値が小さい方が濃くなっている
p3 <- p2 +
scale_fill_gradient(low = "white", high = "#CB454A")
p3
p0 <- ggplot(data = us_states_elec,
mapping = aes(x = long, y = lat, group = group, fill = d_points))
p1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
p2 <- p1 +
labs(title = "Winning margins", fill = "Percent")  +
ggthemes::theme_map()
p2
p2 + scale_fill_gradient2(low = "red", high = "blue", breaks = c(-25, 0, 25, 50, 75))
p2 + scale_fill_gradient2(low = "blue",
mid = scales::muted("purple"),
high = "red",
breaks = c(-25, 0, 25, 50, 75))
p2 + scale_fill_gradient2(low = "red",
mid = scales::muted("purple"),
high = "blue",
breaks = c(-25, 0, 25, 50, 75))
p0 <- ggplot(data = subset(us_states_elec,
region %nin% "district of columbia"))
p0 <- ggplot(data = subset(us_states_elec,
region %nin% "district of columbia"),
mapping = aes(x = long, y = lat, group = group, fill = d_points))
p1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39. lat1 = 45) +
p1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
ggthemes::theme_map()
p1
p2 <- p1 +
scale_fill_gradient2(low = "red",
mid = scales::muted("purple"),
high = "blue") +
labs(title = "Winning margins")
p2 <- p1 +
scale_fill_gradient2(low = "red",
mid = scales::muted("purple"),
high = "blue") +
labs(title = "Winning margins",
fill = "Percent")
p2
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gapminder)
library(socviz)
library(ggrepel)
ggpubr::ggarrange(p1, pi_1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gapminder)
library(socviz)
library(ggrepel)
glimpse(election)
head(election)
election %>% select(state, total_vote,
r_points, pct_trump, party, census) %>%
slice_sample(n = 5)
# 図7.2
# 共和党が赤，民主党が青
party_colors <- c("#2E74C0", "#CB454A")
p0 <- ggplot(data = subset(election, st %nin% "DC"),
mapping = aes(x = r_points,
y = reorder(state, r_points),
color = party))
p1 <- p0 + geom_vline(xintercept = 0,
color = "gray30") +
geom_point(size = 2)
p2 <- p1 + scale_color_manual(values = party_colors) +
scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
labels = c("30\n (Clinton)", "20", "10", "0",
"10" , "20", "30", "40\n (Trump)"))
p2 + facet_wrap(~ census, ncol = 1, scales = "free_y") +
guides(color = "none") +
labs(x = "Point Margin", y = "") +
theme(axis.text = element_text(size = 8))
county_map %>% slice_sample(n = 5)
county_map
#
?county_data
county_data %>%
select(id, name, state, pop_dens, pct_black) %>%
slice_sample(n = 5)
head(county_data)
# id == 0はアメリカ合衆国を表現し，
# id == 01000はアラバマ州に対応している
county_data[county_data$id == "02000", ]
# county_mapには国や州のデータはないため，
# 結合する時に除外される
head(county_map)
head(county_data)
# 結合させる
county_full <- left_join(county_map, county_data, by = "id")
head(county_full)
p <- ggplot(data = county_full,
mapping = aes(x = long, y = lat,
group = group, fill = pop_dens))
p1 <- p +
geom_polygon(color = "gray80", size = 0.1) +
ggthemes::theme_map()
p1
# 人口密度を順序尺度と認識していない
# scale_fill_brewer()関数を使って，手動でスケールを調整する
p2 <- p1 +
scale_fill_brewer(palette = "Reds",
labels = c("0-10", "10-50", "50-100", "100-500",
"500-1,000", "1,000-5,000", ">5,000"))
p2 + labs(title = "Population per \nsquare mile") +
guides(fill = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
# 郡ごとのアフリカ系アメリカ人割合
p0 <- ggplot(data = county_full,
mapping = aes(x = long, y = lat,
group = group,
fill = pct_black))
p1_1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
ggthemes::theme_map()
p1 <- p0 +
geom_polygon(color = "gray80", size = 0.1) +
ggthemes::theme_map() +
coord_equal()
ggpubr::ggarrange(p1, p1_1)
p1
p2 <- p1 +
scale_fill_brewer(palette = "Greens")
p1
p1
p2 <- p1 +
scale_fill_brewer(palette = "Greens")
p2
p2 + labs(fill = "US Population, Percent Black") +
guides(fill = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
orange_pal <- RColorBrewer::brewer.pal(n = 6, name = "Oranges")
orange_rev <- rev(orange_pal)
unique(colnames(gun_p))
unique(colnames(county_full))
# 銃による自殺者
gun_p <- ggplot(data = county_full,
mapping = aes(x = long, y = lat,
group = group,
fill = su_gun6))
gun_p1 <- geom_polygon(color = "gray90", size = 0.1) +
coord_equal() +
scale_fill_manual(values = orange_pal)
gun_p1 <- gun_p +
geom_polygon(color = "gray90", size = 0.1) +
coord_equal() +
scale_fill_manual(values = orange_pal)
unique(colnames(county_full))
# 銃による自殺者
gun_p <- ggplot(data = county_full,
mapping = aes(x = long, y = lat,
group = group,
fill = su_gun6))
gun_p1 <- gun_p +
geom_polygon(color = "gray90", size = 0.1) +
coord_equal() +
scale_fill_manual(values = orange_pal)
gun_p1
gun_p1 <- gun_p +
geom_polygon(color = "gray90", size = 0.1) +
coord_equal() +
scale_fill_manual(values = orange_pal) +
labs(title = "Gun-Related Suicides, 1999-2015",
fill = "Rate per 100,000 pop") +
theme(legend.position = "bottom") +
ggthemes::theme_map()
gun_p1
pop_p <- ggplot(data = county_full,
mapping = aes(x = long, y = lat,
group = group,
fill = pop_dens6))
pop_p <- ggplot(data = county_full,
mapping = aes(x = long, y = lat,
group = group,
fill = pop_dens6))
pop_p1 <- pop_p +
geom_polygon(color = "gray90", size = 0.1) +
coord_equal() +
scale_fill_manual(values = orange_rev) +
labs(title = "Reverse^cpded Population Density",
fill = "People per square mile")  +
theme(legend.position = "bottom") +
ggthemes::theme_map()
pop_p1
ggpubr::ggarrange(gun_p1, pop_p1)
ggpubr::ggarrange(gun_p1, pop_p1)
ggpubr::ggarrange(gun_p1, pop_p1, ncol = 2)
ggpubr::ggarrange(gun_p1, pop_p1, ncol = 1)
ggpubr::ggarrange(gun_p1, pop_p1, ncol = 1)
ggpubr::ggarrange(gun_p1, pop_p1, ncol = 1)
gun_p1 <- gun_p +
geom_polygon(color = "gray90", size = 0.1) +
coord_equal() +
scale_fill_manual(values = orange_pal) +
labs(title = "Gun-Related Suicides, 1999-2015",
fill = "Rate per 100,000 pop") +
ggthemes::theme_map()
pop_p1 <- pop_p +
geom_polygon(color = "gray90", size = 0.1) +
coord_equal() +
scale_fill_manual(values = orange_rev) +
labs(title = "Reverse-coded Population Density",
fill = "People per square mile")  +
ggthemes::theme_map()
ggpubr::ggarrange(gun_p1, pop_p1, ncol = 1)
